单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。
（1）在任何情况下，单例类永远只有一个实例存在
（2）单例需要有能力为整个系统提供这一唯一实例

1.饿汉式单例模式
线程安全
饿汉式单例是指在方法调用前，实例就已经创建好了。

2.懒汉式单例模式
(1)简单懒汉式单例模式
线程可能不安全
懒汉式单例是指在方法调用获取实例时才创建实例。

(2)有间隔的懒汉式单例模式
线程不安全
懒汉式单例是指在方法调用获取实例时才创建实例。

3.线程安全的懒汉式单例模式
(1)使用同步锁机制synchronized
线程安全
懒汉式单例是指在方法调用获取实例时才创建实例。
为了保证线程安全，要使用同步锁机制，在方法中声明synchronized关键字

(2)使用同步代码块
线程安全
懒汉式单例是指在方法调用获取实例时才创建实例。
为了保证线程安全，提高同步锁效率，使用同步代码块实现

(3)使用同步代码块(针对某些重要的代码进行单独的同步，而不是全部进行同步)
线程可能不安全
懒汉式单例是指在方法调用获取实例时才创建实例。
为了保证线程安全，提高同步锁效率，使用同步代码块实现

(4)双检查锁机制单例(推荐)
<1>采用DCL的双检查锁机
<2>使用volatile关键字保其可见性
线程安全

4.使用静态内置类实现单例模式	
线程安全

5.序列化与反序列化的单例模式
(1)未使用readResolve方法的单例模式
线程不安全
序列号对象的hashCode和反序列化后得到的对象的hashCode值不一样，说明反序列化后返回的对象是重新实例化的，单例被破坏了

(2)使用readResolve方法的单例模式
线程不安全
readResolve方法在反序列化时会被调用，实现反序列化

6.使用static代码块实现模式
线程安全
静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模。

7.使用枚举数据类型实现单例模式
线程安全
枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用。

8.完善使用enum枚举实现单例模式
线程安全
不暴露枚举类实现细节


